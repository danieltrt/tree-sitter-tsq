==============
Anonymous leaf
==============

"test"

---

(query
  (pattern
    pattern: (anonymous_leaf)))


=================================
Escape sequence in anonymous leaf
=================================

"hello\nworld\rhow\tare\0you\\"

---

(query
  (pattern
    pattern: (anonymous_leaf
      (escape_sequence)
      (escape_sequence)
      (escape_sequence)
      (escape_sequence)
      (escape_sequence))))


===========================
Named node with no children
===========================

(binary_expression)

---

(query
  (pattern
    pattern: (named_node (node_name))))


====================================
Captured named node with no children
====================================

(binary_expression) @result

---

(query
  (pattern pattern: (named_node (node_name)) (capture)))


=========================
Named node with one child
=========================

(binary_expression (string_literal))

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (child pattern: (named_node (node_name))))))


============================
Named node with two children
============================

(binary_expression (string_literal) (number_literal))

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (child pattern: (named_node (node_name)))
      (child pattern: (named_node (node_name))))))


=====================================
Captured named node with two children
=====================================

(binary_expression (string_literal) @str (number_literal) @num) @bin

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (child pattern: (named_node (node_name)) (capture))
      (child pattern: (named_node (node_name)) (capture)))
    (capture)))


=========================
Named node with one field
=========================

(binary_expression field: (string_literal))

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (child
        (field_name)
        pattern: (named_node (node_name))))))


==========================
Named node with two fields
==========================

(binary_expression field: (string_literal) another: (number_literal))

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (child
        (field_name)
        pattern: (named_node (node_name)))
      (child
        (field_name)
        pattern: (named_node (node_name))))))


==================================
Named node with leading underscore
==================================

(_binary_expression)

---

(query
  (pattern pattern: (named_node (node_name))))


==============
Negated fields
==============

(assignment_expression !left)

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (negated_child (field_name)))))


==============================
Negated and non-negated fields
==============================

(assignment_expression
  !left
  right: (identifier)
  !center
  "bottom")

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (negated_child (field_name))
      (child (field_name) pattern: (named_node (node_name)))
      (negated_child (field_name))
      (child pattern: (anonymous_leaf)))))


=============
Nested fields
=============

(assignment_expression
  left: (member_expression
    object: (call_expression)))

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (child
        (field_name)
        pattern: (named_node
          (node_name)
          (child
            (field_name)
            pattern: (named_node (node_name))))))))


=============
Wildcard node
=============

(_)

---

(query
  (pattern pattern:
    (wildcard_node)))


=================
Multiple patterns
=================

(binary_expression (string_literal))
_
(binary_expression (string_literal) (number_literal))

---

(query
  (pattern
    pattern: (named_node
      (node_name)
      (child pattern: (named_node (node_name)))))
  (pattern pattern: (wildcard_node))
  (pattern
    pattern: (named_node
      (node_name)
      (child pattern: (named_node (node_name)))
      (child pattern: (named_node (node_name))))))


========
Comments
========

; comment
(binary_expression
; comment
  field: (string_literal) ; comment
  another: (number_literal))

---

(query
  (comment)
  (pattern
    pattern: (named_node
      (node_name)
      (comment)
      (child (field_name) pattern: (named_node (node_name)))
      (comment)
      (child (field_name) pattern: (named_node (node_name))))))
